{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let indices_20 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ]

func check_whitelist(caller: Address) = {
  this == caller || match getBoolean("W_" + caller.bytes.toBase58String()) {
    case x: Boolean => x
    case _          => false
  }
}

func fold_put_assets(accum: (List[IntegerEntry], String, Int, List[AttachedPayment]), index: Int) = {
  let (list, airdrop, end, payments) = accum

  if index >= size(payments) then
    accum
  else if payments[index].amount != 1 then
    throw("Wrong payment " + (index + 1).toString() + " amount")
  else {
    let id = payments[index].assetId.value().toBase58String()

    ( list ++ [
        StringEntry(airdrop + "_X_" + (end + index).toBytes().toBase58String(), id)
      ],
      airdrop,
      end,
      payments )
  }
}

func fold_allow(accum: (List[IntegerEntry], String, Int, List[String]), index: Int) = {
  let (list, airdrop, amount, accounts) = accum

  if index >= size(accounts) then
    accum
  else {
    let key = airdrop + "_A_" + accounts[index]

    let allowed = match getInteger(key) {
      case j: Int => j
      case _      => 0
    }

    ( list :+ IntegerEntry(key, allowed + amount),
      airdrop, amount, accounts )
  }
}

func fold_claim(
  accum: (List[DeleteEntry|ScriptTransfer], Int, String, Address),
  index: Int
) = {
  let (list, amount, airdrop, claimer) = accum

  if amount <= 0 then
    accum
  else {
    let asset_key = airdrop + "_X_" + index.toBytes().toBase58String()
    let asset_id  = getStringValue(asset_key).fromBase58String()

    ( list ++ [
        DeleteEntry(asset_key),
        ScriptTransfer(claimer, 1, asset_id)
      ],
      amount - 1,
      airdrop,
      claimer
    )
  }
}

@Callable(i)
func whitelist_add(user: String) = {
  if this != i.caller then
    throw("Caller is not dApp owner")
  else
    ( [ BooleanEntry("W_" + user, true) ],
      unit )
}

@Callable(i)
func whitelist_remove(user: String) = {
  if this != i.caller then
    throw("Caller is not dApp owner")
  else
    ( [ DeleteEntry("W_" + user) ],
      unit )
}

@Callable(i)
func put_assets(airdrop: String) = {
  if !check_whitelist(i.caller) then
    throw("Caller not in whitelist")
  else if i.payments.size() == 0 then
    throw("No payment")
  else if i.payments.size() > 20 then
    throw("To many assets")
  else {
    let k_end = airdrop + "_end"

    let end = match getInteger(k_end) {
      case j: Int => j
      case _      => 0
    }

    let (list, airdrop_, end_, payments_) = FOLD<20>(indices_20, ([], airdrop, end, i.payments), fold_put_assets)

    ( [ IntegerEntry(k_end, end + i.payments.size())
      ] ++ list,
      unit )
  }
}

@Callable(i)
func allow(airdrop: String, amount: Int, accounts: List[String]) = {
  if !check_whitelist(i.caller) then
    throw("Caller not in whitelist")
  else if amount == 0 then
    throw("Wrong amount")
  else if size(accounts) == 0 then
    throw("No accounts")
  else if size(accounts) > 20 then
    throw("Too many accounts")
  else {
    let (list, airdrop_, amount_, accounts_) = FOLD<20>(indices_20, ([], airdrop, amount, accounts), fold_allow)

    ( list,
      unit )
  }
}

@Callable(i)
func allow_anyone(airdrop: String, amount: Int) = {
  if !check_whitelist(i.caller) then
    throw("Caller not in whitelist")
  else if amount == 0 then
    throw("Wrong amount")
  else {
    let key = airdrop + "_AA"

    let allowed = match getInteger(key) {
      case j: Int => j
      case _      => 0
    }

    ( [ IntegerEntry(key, allowed + amount) ],
      unit )
  }
}

@Callable(i)
func claim(airdrop: String, amount: Int) = {
  let k_allowed = airdrop + "_A_" + i.caller.bytes.toBase58String()

  let allowed_anyone = match getInteger(airdrop + "_AA") {
    case j: Int => j
    case _      => 0
  }

  let allowed = match getInteger(k_allowed) {
    case j: Int => j
    case _      => allowed_anyone
  }

  if allowed < amount then
    throw("Caller not allowed to claim")
  else {
    let k_begin = airdrop + "_begin"
    let k_end   = airdrop + "_end"

    let begin = match getInteger(k_begin) {
      case j: Int => j
      case _      => 0
    }

    let end = match getInteger(k_end) {
      case j: Int => j
      case _      => 0
    }

    if amount <= 0 || amount > 20 then
      throw("Wrong amount (should be in range 1 -- 20)")
    else if end - begin < amount then
      throw("No assets in stock")
    else {
      let indices = [
        begin,
        begin + 1,
        begin + 2,
        begin + 3,
        begin + 4,
        begin + 5,
        begin + 6,
        begin + 7,
        begin + 8,
        begin + 9,
        begin + 10,
        begin + 11,
        begin + 12,
        begin + 13,
        begin + 14,
        begin + 15,
        begin + 16,
        begin + 17,
        begin + 18,
        begin + 19
      ]

      let (list, amount_, airdrop_, claimer_) = FOLD<20>(
        indices,
        ( [], amount, airdrop, Address(i.caller.bytes) ),
        fold_claim
      )

      ( [ IntegerEntry(k_allowed, allowed - amount),
          IntegerEntry(k_begin, begin + amount)
        ] ++ list,
        unit )
    }
  }
}
